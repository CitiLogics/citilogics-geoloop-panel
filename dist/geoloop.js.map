{"version":3,"sources":["../src/geoloop.js"],"names":["moment","mapboxgl","d3","GeoLoop","ctrl","mapContainer","createMap","frames","currentFrameIndex","animation","mapCenterLonLat","parseFloat","panel","mapCenterLongitude","mapCenterLatitude","accessToken","mbApiKey","map","Map","container","style","mapStyle","center","zoom","initialZoom","legend","data","needToRedrawFrames","stopAnimation","clearFrames","createFrames","startAnimation","forEach","item","removeLayer","dataCharacteristics","timeValues","console","log","geo","getSource","undefined","sizeIsDynamic","sizeRamp","codeTo","colorIsDynamic","colorRamp","featureType","renderType","layerType","opts","layerTypes","sizeStops","colorStops","minInput","maxInput","auto","min","max","minValue","maxValue","nStops","iStop","stop","push","colorInterpolator","time","frameName","pp","geoFilter","duration","property","type","stops","fixedValue","addLayer","id","source","paint","filter","slider","select","attr","length","setInterval","stepFrame","clearInterval","oldFrame","newFrame","opacitySelectors","selector","setPaintProperty","tstamp","timeStr","unix","format","text","resize","panTo","mapCenterMoved","zoomFactor","setZoom","parseInt","remove"],"mappings":"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","file":"geoloop.js","sourcesContent":["/* eslint-disable id-length, no-unused-vars */\nimport moment from 'moment';\nimport mapboxgl from './libs/mapbox-gl';\nimport * as d3 from './libs/d3';\n/* eslint-disable id-length, no-unused-vars */\n\nexport default class GeoLoop {\n  constructor(ctrl, mapContainer) {\n    this.ctrl = ctrl;\n    this.mapContainer = mapContainer;\n    this.createMap();\n    this.frames = []; // list of timestamps\n    this.currentFrameIndex = 0;\n    this.animation = {};\n  }\n\n  createMap() {\n    const mapCenterLonLat = [parseFloat(this.ctrl.panel.mapCenterLongitude), parseFloat(this.ctrl.panel.mapCenterLatitude)];\n    mapboxgl.accessToken = this.ctrl.panel.mbApiKey;\n    this.map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/' + this.ctrl.panel.mapStyle,\n      center: mapCenterLonLat,\n      zoom: parseFloat(this.ctrl.panel.initialZoom)\n    });\n  }\n\n  createLegend() {\n    this.legend = {};\n  }\n\n  needToRedrawFrames() {\n    this.legend = {};\n    return true;\n  }\n\n  drawLayerFrames() {\n    const data = this.ctrl.data;\n    if (this.needToRedrawFrames(data)) {\n      this.stopAnimation();\n      this.clearFrames();\n      this.createFrames(data);\n      this.startAnimation();\n    }\n  }\n\n  clearFrames() {\n    this.frames.forEach((item) => {\n      this.map.removeLayer('f-' + item);\n    });\n    this.frames = [];\n  }\n\n  createFrames() {\n    if (!this.ctrl.dataCharacteristics.timeValues) {\n      console.log('no frames');\n      return;\n    }\n\n    if (!this.ctrl.geo) {\n      console.log('no geo data');\n      return;\n    }\n\n    if (this.map.getSource('geo') === undefined) {\n      console.log('no geo source in map');\n      return;\n    }\n\n    const sizeIsDynamic = (this.ctrl.panel.sizeRamp.codeTo === 'measurement');\n    const colorIsDynamic = (this.ctrl.panel.colorRamp.codeTo === 'measurement');\n    const featureType = this.ctrl.panel.renderType;\n    const layerType = this.ctrl.opts.layerTypes[featureType];\n    let sizeStops = [[0, 1], [100, 10]];\n    const colorStops = [];\n\n    if (sizeIsDynamic) {\n      // populate the sizeStops array with the input/output values\n      let minInput = 0;\n      let maxInput = 1;\n      if (this.ctrl.panel.sizeRamp.auto) {\n        minInput = this.ctrl.dataCharacteristics.min;\n        maxInput = this.ctrl.dataCharacteristics.max;\n      } else {\n        minInput = parseFloat(this.ctrl.panel.sizeRamp.minValue);\n        maxInput = parseFloat(this.ctrl.panel.sizeRamp.maxValue);\n      }\n\n      sizeStops = [[minInput, parseFloat(this.ctrl.panel.sizeRamp.min)], [maxInput, parseFloat(this.ctrl.panel.sizeRamp.max)]];\n      // console.log('size stops: ', sizeStops);\n    }\n\n    if (colorIsDynamic) {\n      // populate the sizeStops array with the input/output values\n      let minInput = 0;\n      let maxInput = 1;\n      if (this.ctrl.panel.colorRamp.auto) {\n        minInput = this.ctrl.dataCharacteristics.min;\n        maxInput = this.ctrl.dataCharacteristics.max;\n      } else {\n        minInput = parseFloat(this.ctrl.panel.colorRamp.minValue);\n        maxInput = parseFloat(this.ctrl.panel.colorRamp.maxValue);\n      }\n\n      const nStops = 25;\n\n      for (let iStop = 0; iStop <= nStops; iStop += 1) {\n        const stop = minInput + ((iStop / nStops) * (maxInput - minInput));\n        colorStops.push([stop, this.ctrl.panel.colorInterpolator(stop)]);\n      }\n\n      // console.log('color stops: ', colorStops);\n    }\n\n    this.ctrl.dataCharacteristics.timeValues.forEach((time) => {\n      const frameName = 'f-' + time;\n      // create new map layer for this animation frame (name is the time code)\n      const pp = {}; // paint properties\n      let geoFilter = [];\n      if (featureType === 'line') {\n        geoFilter = ['==', '$type', 'LineString'];\n        pp['line-opacity'] = 0;\n        pp['line-opacity-transition'] = { duration: 0 };\n        pp['line-width'] = sizeIsDynamic ? {\n          property: frameName,\n          type: 'exponential',\n          stops: sizeStops\n        } : parseFloat(this.ctrl.panel.sizeRamp.fixedValue);\n        pp['line-color'] = colorIsDynamic ? {\n          property: frameName,\n          type: 'exponential',\n          stops: colorStops\n        } : parseFloat(this.ctrl.panel.colorRamp.fixedValue);\n      } else if (featureType === 'point') {\n        geoFilter = ['==', '$type', 'Point'];\n        pp['circle-opacity'] = 0;\n        pp['circle-opacity-transition'] = { duration: 0 };\n        pp['circle-radius'] = sizeIsDynamic ? {\n          property: frameName,\n          type: 'exponential',\n          stops: sizeStops\n        } : parseFloat(this.ctrl.panel.sizeRamp.fixedValue);\n        pp['circle-color'] = colorIsDynamic ? {\n          property: frameName,\n          type: 'exponential',\n          stops: colorStops\n        } : this.ctrl.panel.colorRamp.fixedValue;\n      } else if (featureType === 'polygon') {\n        geoFilter = ['==', '$type', 'Polygon'];\n        pp['fill-opacity'] = 0;\n        pp['fill-opacity-transition'] = { duration: 0 };\n        pp['fill-color'] = colorIsDynamic ? {\n          property: frameName,\n          type: 'exponential',\n          stops: colorStops\n        } : parseFloat(this.ctrl.panel.colorRamp.fixedValue);\n      }\n\n      this.map.addLayer({\n        id: 'f-' + time,\n        type: layerType,\n        source: 'geo',\n        paint: pp,\n        filter: geoFilter,\n      });\n\n      this.frames.push(time);\n    });\n\n    // get slider component, set min/max/value\n    const slider = d3.select('#map_' + this.ctrl.panel.id + '_slider')\n      .attr('min', 0)\n      .attr('max', this.frames.length);\n\n  }\n\n  startAnimation() {\n    if (this.animation) {\n      this.stopAnimation();\n    }\n\n    this.animation = setInterval(() => {\n      this.stepFrame();\n    }, 200);\n  }\n\n  stopAnimation() {\n    clearInterval(this.animation);\n    this.animation = null;\n  }\n\n  stepFrame() {\n    if (this.frames.length === 0) {\n      // console.log('skipping animation: no frames');\n      return;\n    }\n    const oldFrame = 'f-' + this.frames[this.currentFrameIndex];\n    this.currentFrameIndex += 1;\n    if (this.currentFrameIndex >= this.frames.length) {\n      this.currentFrameIndex = 0;\n    }\n    const newFrame = 'f-' + this.frames[this.currentFrameIndex];\n\n    const opacitySelectors = {\n      'point': 'circle-opacity',\n      'polygon': 'fill-opacity',\n      'line': 'line-opacity'\n    };\n    const selector = opacitySelectors[this.ctrl.panel.renderType];\n\n    this.map.setPaintProperty(newFrame, selector, 1);\n    this.map.setPaintProperty(oldFrame, selector, 0);\n    const tstamp = this.frames[this.currentFrameIndex] / 1e3;\n    const timeStr = moment.unix(tstamp).format('YYYY-MM-DD HH:mm:ss');\n    // console.log('time is ', timeStr);\n\n    // set time string in legend\n    d3.select('#map_' + this.ctrl.panel.id + '_date').text(timeStr);\n    // set slider position to indicate time-location\n    d3.select('#map_' + this.ctrl.panel.id + '_slider').property('value', this.currentFrameIndex);\n  }\n\n  resize() {\n    this.map.resize();\n  }\n\n  panToMapCenter() {\n    this.map.panTo([parseFloat(this.ctrl.panel.mapCenterLongitude), parseFloat(this.ctrl.panel.mapCenterLatitude)]);\n    this.ctrl.mapCenterMoved = false;\n  }\n\n  setZoom(zoomFactor) {\n    this.map.setZoom(parseInt(zoomFactor, 10));\n  }\n\n  remove() {\n    this.map.remove();\n  }\n}\n"]}